Metadata-Version: 2.1
Name: pytest-redis
Version: 3.1.3
Summary: Redis fixtures and fixture factories for Pytest.
Author-email: Grzegorz Śliwiński <fizyk+pypi@fizyk.dev>
License:                    GNU LESSER GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
         Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
        
          This version of the GNU Lesser General Public License incorporates
        the terms and conditions of version 3 of the GNU General Public
        License, supplemented by the additional permissions listed below.
        
          0. Additional Definitions.
        
          As used herein, "this License" refers to version 3 of the GNU Lesser
        General Public License, and the "GNU GPL" refers to version 3 of the GNU
        General Public License.
        
          "The Library" refers to a covered work governed by this License,
        other than an Application or a Combined Work as defined below.
        
          An "Application" is any work that makes use of an interface provided
        by the Library, but which is not otherwise based on the Library.
        Defining a subclass of a class defined by the Library is deemed a mode
        of using an interface provided by the Library.
        
          A "Combined Work" is a work produced by combining or linking an
        Application with the Library.  The particular version of the Library
        with which the Combined Work was made is also called the "Linked
        Version".
        
          The "Minimal Corresponding Source" for a Combined Work means the
        Corresponding Source for the Combined Work, excluding any source code
        for portions of the Combined Work that, considered in isolation, are
        based on the Application, and not on the Linked Version.
        
          The "Corresponding Application Code" for a Combined Work means the
        object code and/or source code for the Application, including any data
        and utility programs needed for reproducing the Combined Work from the
        Application, but excluding the System Libraries of the Combined Work.
        
          1. Exception to Section 3 of the GNU GPL.
        
          You may convey a covered work under sections 3 and 4 of this License
        without being bound by section 3 of the GNU GPL.
        
          2. Conveying Modified Versions.
        
          If you modify a copy of the Library, and, in your modifications, a
        facility refers to a function or data to be supplied by an Application
        that uses the facility (other than as an argument passed when the
        facility is invoked), then you may convey a copy of the modified
        version:
        
           a) under this License, provided that you make a good faith effort to
           ensure that, in the event an Application does not supply the
           function or data, the facility still operates, and performs
           whatever part of its purpose remains meaningful, or
        
           b) under the GNU GPL, with none of the additional permissions of
           this License applicable to that copy.
        
          3. Object Code Incorporating Material from Library Header Files.
        
          The object code form of an Application may incorporate material from
        a header file that is part of the Library.  You may convey such object
        code under terms of your choice, provided that, if the incorporated
        material is not limited to numerical parameters, data structure
        layouts and accessors, or small macros, inline functions and templates
        (ten or fewer lines in length), you do both of the following:
        
           a) Give prominent notice with each copy of the object code that the
           Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the object code with a copy of the GNU GPL and this license
           document.
        
          4. Combined Works.
        
          You may convey a Combined Work under terms of your choice that,
        taken together, effectively do not restrict modification of the
        portions of the Library contained in the Combined Work and reverse
        engineering for debugging such modifications, if you also do each of
        the following:
        
           a) Give prominent notice with each copy of the Combined Work that
           the Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the Combined Work with a copy of the GNU GPL and this license
           document.
        
           c) For a Combined Work that displays copyright notices during
           execution, include the copyright notice for the Library among
           these notices, as well as a reference directing the user to the
           copies of the GNU GPL and this license document.
        
           d) Do one of the following:
        
               0) Convey the Minimal Corresponding Source under the terms of this
               License, and the Corresponding Application Code in a form
               suitable for, and under terms that permit, the user to
               recombine or relink the Application with a modified version of
               the Linked Version to produce a modified Combined Work, in the
               manner specified by section 6 of the GNU GPL for conveying
               Corresponding Source.
        
               1) Use a suitable shared library mechanism for linking with the
               Library.  A suitable mechanism is one that (a) uses at run time
               a copy of the Library already present on the user's computer
               system, and (b) will operate properly with a modified version
               of the Library that is interface-compatible with the Linked
               Version.
        
           e) Provide Installation Information, but only if you would otherwise
           be required to provide such information under section 6 of the
           GNU GPL, and only to the extent that such information is
           necessary to install and execute a modified version of the
           Combined Work produced by recombining or relinking the
           Application with a modified version of the Linked Version. (If
           you use option 4d0, the Installation Information must accompany
           the Minimal Corresponding Source and Corresponding Application
           Code. If you use option 4d1, you must provide the Installation
           Information in the manner specified by section 6 of the GNU GPL
           for conveying Corresponding Source.)
        
          5. Combined Libraries.
        
          You may place library facilities that are a work based on the
        Library side by side in a single library together with other library
        facilities that are not Applications and are not covered by this
        License, and convey such a combined library under terms of your
        choice, if you do both of the following:
        
           a) Accompany the combined library with a copy of the same work based
           on the Library, uncombined with any other library facilities,
           conveyed under the terms of this License.
        
           b) Give prominent notice with the combined library that part of it
           is a work based on the Library, and explaining where to find the
           accompanying uncombined form of the same work.
        
          6. Revised Versions of the GNU Lesser General Public License.
        
          The Free Software Foundation may publish revised and/or new versions
        of the GNU Lesser General Public License from time to time. Such new
        versions will be similar in spirit to the present version, but may
        differ in detail to address new problems or concerns.
        
          Each version is given a distinguishing version number. If the
        Library as you received it specifies that a certain numbered version
        of the GNU Lesser General Public License "or any later version"
        applies to it, you have the option of following the terms and
        conditions either of that published version or of any later version
        published by the Free Software Foundation. If the Library as you
        received it does not specify a version number of the GNU Lesser
        General Public License, you may choose any version of the GNU Lesser
        General Public License ever published by the Free Software Foundation.
        
          If the Library as you received it specifies that a proxy can decide
        whether future versions of the GNU Lesser General Public License shall
        apply, that proxy's public statement of acceptance of any version is
        permanent authorization for you to choose that version for the
        Library.
Project-URL: Source, https://github.com/ClearcodeHQ/pytest-redis
Project-URL: Bug Tracker, https://github.com/ClearcodeHQ/pytest-redis/issues
Project-URL: Changelog, https://github.com/ClearcodeHQ/pytest-redis/blob/v3.1.3/CHANGES.rst
Keywords: tests,pytest,fixture,redis
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing
Classifier: Framework :: Pytest
Requires-Python: >=3.9
Description-Content-Type: text/x-rst
License-File: COPYING
License-File: COPYING.lesser
Requires-Dist: pytest>=6.2
Requires-Dist: port-for>=0.6.0
Requires-Dist: mirakuru
Requires-Dist: redis>=3

.. image:: https://raw.githubusercontent.com/ClearcodeHQ/pytest-redis/master/logo.png
    :width: 100px
    :height: 100px

pytest-redis
============

.. image:: https://img.shields.io/pypi/v/pytest-redis.svg
    :target: https://pypi.python.org/pypi/pytest-redis/
    :alt: Latest PyPI version

.. image:: https://img.shields.io/pypi/wheel/pytest-redis.svg
    :target: https://pypi.python.org/pypi/pytest-redis/
    :alt: Wheel Status

.. image:: https://img.shields.io/pypi/pyversions/pytest-redis.svg
    :target: https://pypi.python.org/pypi/pytest-redis/
    :alt: Supported Python Versions

.. image:: https://img.shields.io/pypi/l/pytest-redis.svg
    :target: https://pypi.python.org/pypi/pytest-redis/
    :alt: License

What is this?
=============

This is a pytest plugin, that enables you to test your code that relies on a running Redis database.
It allows you to specify additional fixtures for Redis process and client.

How to use
==========

Plugin contains three fixtures

* **redisdb** - This is a redis client fixture. It constructs a redis client and cleans redis database after the test.
    It relies on redis_proc fixture, and as such the redis process is started at the very beginning of the first test
    using this fixture, and stopped after the last test finishes.
* **redis_proc** - session scoped fixture, that starts Redis instance at it's first use and stops at the end of the tests.
* **redis_nooproc** - a nooprocess fixture, that's connecting to already running redis

Simply include one of these fixtures into your tests fixture list.

.. code-block:: python

    #
    def test_redis(redisdb):
        """Check that it's actually working on redis database."""
        redisdb.set('test1', 'test')
        redisdb.set('test2', 'test')

        my_functionality = MyRedisBasedComponent()
        my_functionality.do_something()
        assert my_functionality.did_something

        assert redisdb.get("did_it") == 1

For the example above works like following:

1. pytest runs tests
2. redis_proc starts redis database server
3. redisdb creates client connection to the server
4. test itself runs and finishes
5. redisdb cleans up the redis
6. redis_proc stops server (if that was the last test using it)
7. pytest ends running tests

You can also create additional redis client and process fixtures if you'd need to:


.. code-block:: python

    from pytest_redis import factories

    redis_my_proc = factories.redis_proc(port=None)
    redis_my = factories.redisdb('redis_my_proc')

    def test_my_redis(redis_my):
        """Check that it's actually working on redis database."""
        redis_my.set('test1', 'test')
        redis_my.set('test2', 'test')

        my_functionality = MyRedisBasedComponent()
        my_functionality.do_something()
        assert my_functionality.did_something

        assert redis_my.get("did_it") == 1

.. note::

    Each Redis process fixture can be configured in a different way than the others through the fixture factory arguments.


Connecting to already existing redis database
---------------------------------------------

Some projects are using already running redis servers (ie on docker instances).
In order to connect to them, one would be using the ``redis_nooproc`` fixture.

.. code-block:: python

    redis_external = factories.redisdb('redis_nooproc')

    def test_redis(redis_external):
        """Check that it's actually working on redis database."""
        redis_external.set('test1', 'test')
        redis_external.set('test2', 'test')

        my_functionality = MyRedisBasedComponent()
        my_functionality.do_something()
        assert my_functionality.did_something

        assert redis_external.get("did_it") == 1

Standard configuration options apply to it. Note that the `modules` configuration option
has no effect with the ``redis_nooproc`` fixture, it is the responsibility of the already
running redis server to be properly started with extension modules, if needed.

By default the ``redis_nooproc`` fixture would connect to Redis
instance using **6379** port attempting to make a successful socket
connection within **15 seconds**. The fixture will block your test run
within this timeout window. You can overwrite the timeout like so:


.. code-block:: python

    # set the blocking wait to 5 seconds
    redis_external = factories.redis_noproc(timeout=5)

    def test_redis(redis_external):
        """Check that it's actually working on redis database."""
        redis_external.set('test1', 'test')
        # etc etc

These are the configuration options that are working on all levels with the ``redis_nooproc`` fixture:

Configuration
=============

You can define your settings in three ways, it's fixture factory argument, command line option and pytest.ini configuration option.
You can pick which you prefer, but remember that these settings are handled in the following order:

    * ``Fixture factory argument``
    * ``Command line option``
    * ``Configuration option in your pytest.ini file``

.. list-table:: Configuration options
   :header-rows: 1

   * - Redis server option
     - Fixture factory argument
     - Command line option
     - pytest.ini option
     - Noop process fixture
     - Default
   * - executable
     - executable
     - --redis-exec
     - redis_exec
     - -
     - Look in PATH for redis-server via shutil.which
   * - host
     - host
     - --redis-host
     - redis_host
     - host
     - 127.0.0.1
   * - port
     - port
     - --redis-port
     - redis_port
     - port
     - random
   * - username
     - username
     - --redis-username
     - redis_username
     - username
     - None
   * - password
     - password
     - --redis-password
     - redis_password
     - password
     - None
   * - connection timeout
     - timeout
     - --redis-timeout
     - redis_timeout
     - -
     - 30
   * - number of databases
     - db_count
     - --redis-db-count
     - redis_db_count
     - -
     - 8
   * - Whether to enable logging to the system logger
     - syslog
     - --redis-syslog
     - redis_syslog
     - -
     - False
   * - Redis log verbosity level
     - loglevel
     - --redis-loglevel
     - redis_loglevel
     - -
     - notice
   * - Compress dump files
     - compress
     - --redis-compress
     - redis_compress
     - -
     - True
   * - Add checksum to RDB files
     - checksum
     - --redis-rdbcompress
     - redis_rdbchecksum
     - -
     - False
   * - Save configuration
     - save
     - --redis-save
     - redis_save
     - -
     - ""
   * - Redis test instance data directory path
     - datadir
     - --redis-datadir
     - redis_datadir
     - -
     - ""
   * - Redis test instance extension module(s) path
     - modules (list of paths)
     - --redis-modules (comma-separated string)
     - redis_modules (comma-separated string)
     - -
     - ""

Example usage:

* pass it as an argument in your own fixture

.. code-block:: python

    redis_proc = factories.redis_proc(port=8888)

* use ``--redis-port`` command line option when you run your tests

.. code-block:: bash

    py.test tests --redis-port=8888


* specify your port as ``redis_port`` in your ``pytest.ini`` file.

    To do so, put a line like the following under the ``[pytest]`` section of your ``pytest.ini``:

.. code-block:: ini

    [pytest]
    redis_port = 8888

Options below are for configuring redis client fixture.

+---------------------+--------------------------+---------------------+-------------------+---------+
| Redis client option | Fixture factory argument | Command line option | pytest.ini option | Default |
+=====================+==========================+=====================+===================+=========+
| decode_response     | decode                   | --redis-decode      | redis_decode      | False   |
+---------------------+--------------------------+---------------------+-------------------+---------+

Release
=======

Install pipenv and --dev dependencies first, Then run:

.. code-block:: bash

    pipenv run tbump [NEW_VERSION]
